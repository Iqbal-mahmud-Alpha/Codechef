#include<bits/stdc++.h>
using namespace std;
#define faster         ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define mem(a,b)       memset(a,b,sizeof(a))
#define ff first
#define ss second
#define all(x)      x.begin(),x.end()
#define pr pair<ll,ll>
#define pb push_back
#define gcd(a,b)    __gcd(a,b)
#define lcm(a,b)    (a*(b/gcd(a,b)))
#define mod  1000000007
#define num 1000000

/**------- Char Chk----------*/
bool is_lower(char ch)
{
    if(ch>='a' && ch<='z') return true;
    return false;
}
bool is_upper(char ch)
{
    if(ch>='A' && ch<='Z') return true;
    return false;
}
bool is_digit(char ch)
{
    if(ch>='0' && ch<='9') return true;
    return false;
}

/**----data type----*/
typedef long long int ll;
typedef unsigned long long int llu;

/**
Efficient approach is to use bit-manipulation. Instead of iterating for every number from ‘l’ to ‘r’,
iterate only after updating the desired number(‘num’) i.e., 
take the bitwise ‘OR’ of number with the consecutive number. For instance,

Let l = 2, and r = 10
1. num = 2
2. x = num OR (num + 1)
       = 2 | 3 = 010 | 011 = 011
   num = 3(011)
3. x = 3 | 4 = 011 | 100 = 111
   num = 7(111)
4. x = 7 | 8 = 0111 | 1000 = 1111
   Since 15(11112) is greater than
   10, thus stop traversing for next number.
5. Final answer = 7  
*/

int Max(int a, int b)
{
    while((a | (a+1))<=b)
    {
        a=a|(a+1);
    }
    return a;
}
int main()
{
    int tc,n,l,r;
    cin>>tc;
    while(tc--)
    {
        cin>>l>>r;
        cout<<Max(l,r)<<endl;
    }
}
